{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 67, "column": 0}, "map": {"version":3,"sources":["file:///Users/moe.sarraf/Documents/GitHub/cwi-docs-nextjs/src/utils/htmlReader.tsx"],"sourcesContent":["import fs from 'fs';\nimport path from 'path';\n\nexport interface ParsedHTMLContent {\n  title: string;\n  content: string;\n  body: string;\n}\n\n/**\n * Reads and parses snippet files (.flsnp)\n * @param snippetPath - The path to the snippet file relative to the HTML file\n * @param currentFilePath - The path of the current HTML file being processed\n * @returns Parsed snippet content\n */\nfunction readSnippetFile(snippetPath: string, currentFilePath: string): string | null {\n  try {\n    // Resolve the snippet path relative to the current HTML file\n    const currentDir = path.dirname(currentFilePath);\n    const resolvedRelativePath = path.join(currentDir, snippetPath);\n    const filePath = path.join(process.cwd(), 'public', resolvedRelativePath);\n\n    // Check if file exists\n    if (!fs.existsSync(filePath)) {\n      console.warn(`Snippet file not found: ${filePath}`);\n      return null;\n    }\n\n    // Read the file\n    const snippetContent = fs.readFileSync(filePath, 'utf-8');\n\n    // Extract body content from the snippet\n    const bodyMatch = snippetContent.match(/<body[^>]*>([\\s\\S]*?)<\\/body>/i);\n    if (bodyMatch) {\n      // Simple cleaning without recursive processing\n      let content = bodyMatch[1];\n      // Remove MadCap attributes\n      content = content.replace(/\\s*MadCap:[^=]*=\"[^\"]*\"/gi, '');\n      content = content.replace(/\\s*xmlns:[^=]*=\"[^\"]*\"/gi, '');\n      content = content.replace(/\\s*data-mc-[^=]*=\"[^\"]*\"/gi, '');\n      // Remove most class attributes but keep some basic ones\n      content = content.replace(/\\s*class=\"[^\"]*\"/gi, '');\n      \n      // Remove unnecessary wrapper tags for inline snippets\n      content = content.replace(/^<p[^>]*>\\s*/, '').replace(/\\s*<\\/p>$/, '');\n      \n      // Additional cleanup for inline snippets - remove any remaining paragraph wrappers\n      if (content.match(/^<p[^>]*>.*<\\/p>$/)) {\n        content = content.replace(/^<p[^>]*>/, '').replace(/<\\/p>$/, '');\n      }\n      \n      // Fix image paths relative to the snippet file location\n      const snippetDir = path.dirname(resolvedRelativePath);\n      content = content.replace(/<img([^>]*)\\ssrc=\"([^\"]+)\"/g, (match, attrs, src) => {\n        if (src.startsWith('http') || src.startsWith('/')) {\n          return match; // Already absolute or external\n        }\n        // Convert relative path to absolute path relative to snippet location\n        const resolvedPath = path.join(snippetDir, src);\n        const absolutePath = '/' + resolvedPath.replace(/\\\\/g, '/');\n        return `<img${attrs} src=\"${absolutePath}\"`;\n      });\n      \n      return content.trim();\n    }\n\n    return null;\n  } catch (error) {\n    console.error(`Error reading snippet file ${snippetPath}:`, error);\n    return null;\n  }\n}\n\n/**\n * Reads and parses HTML files from the public/{language}/Content directory\n * @param href - The href path from the navigation JSON (e.g., \"/en/Content/Explore/Getting-Started/Supported-software-and-hardware.htm\")\n * @returns Parsed HTML content with title and body\n */\nexport async function readHTMLFile(href: string): Promise<ParsedHTMLContent | null> {\n  try {\n    // Remove leading slash\n    const cleanHref = href.startsWith('/') ? href.slice(1) : href;\n    const filePath = path.join(process.cwd(), 'public', cleanHref);\n    \n    // Check if file exists\n    if (!fs.existsSync(filePath)) {\n      console.warn(`HTML file not found: ${filePath}`);\n      return null;\n    }\n\n    // Read the file\n    const htmlContent = fs.readFileSync(filePath, 'utf-8');\n    \n    // Parse the HTML to extract title and body content\n    const parsed = await parseHTMLContent(htmlContent, cleanHref);\n\n    return parsed;\n  } catch (error) {\n    console.error(`Error reading HTML file ${href}:`, error);\n    return null;\n  }\n}\n\n/**\n * Parses HTML content to extract title and clean body content\n * @param htmlContent - Raw HTML content\n * @param currentFilePath - The path of the current HTML file being processed\n * @returns Parsed content with title and body\n */\nasync function parseHTMLContent(htmlContent: string, currentFilePath: string): Promise<ParsedHTMLContent> {\n  // Extract title from <title> tag or <h1> tag\n  const titleMatch = htmlContent.match(/<title[^>]*>(.*?)<\\/title>/i) ||\n                    htmlContent.match(/<h1[^>]*>(.*?)<\\/h1>/i);\n  const title = titleMatch ? cleanHTML(titleMatch[1]) : 'Untitled';\n\n  // Extract body content\n  const bodyMatch = htmlContent.match(/<body[^>]*>([\\s\\S]*?)<\\/body>/i);\n  let body = bodyMatch ? bodyMatch[1] : htmlContent;\n\n  // Clean up the body content and process snippets\n  body = await cleanHTMLContent(body, currentFilePath);\n\n  return {\n    title,\n    content: body,\n    body: body\n  };\n}\n\n/**\n * Cleans HTML content by removing unwanted elements and normalizing structure\n * @param html - Raw HTML content\n * @param currentFilePath - The path of the current HTML file being processed\n * @returns Cleaned HTML content\n */\nasync function cleanHTMLContent(html: string, currentFilePath: string): Promise<string> {\n  // Remove script tags and their content\n  html = html.replace(/<script[^>]*>[\\s\\S]*?<\\/script>/gi, '');\n  \n  // Remove style tags and their content\n  html = html.replace(/<style[^>]*>[\\s\\S]*?<\\/style>/gi, '');\n  \n  // Process MadCap elements BEFORE removing attributes\n  // Convert MadCap xref to regular links (must be first to avoid being caught by broken link regex)\n  html = html.replace(/<MadCap:xref href=\"([^\"]+)\">([^<]+)<\\/MadCap:xref>/g, '<a href=\"$1\" class=\"internal-link\">$2</a>');\n  \n  // Handle MadCap snippet blocks - read and include actual content\n  const snippetBlockMatches = html.match(/<MadCap:snippetBlock[^>]*src=\"([^\"]+)\"[^>]*\\/>/g);\n  if (snippetBlockMatches) {\n    for (const match of snippetBlockMatches) {\n      const srcMatch = match.match(/src=\"([^\"]+)\"/);\n      if (srcMatch) {\n        const snippetPath = srcMatch[1];\n        const snippetContent = readSnippetFile(snippetPath, currentFilePath);\n        if (snippetContent) {\n          html = html.replace(match, `<div class=\"snippet-content\">${snippetContent}</div>`);\n        } else {\n          html = html.replace(match, `<div class=\"snippet-placeholder\">ðŸ“„ Snippet: ${snippetPath}</div>`);\n        }\n      }\n    }\n  }\n  \n  // Handle MadCap snippet text - process like snippet blocks but inline\n  const snippetTextMatches = html.match(/<MadCap:snippetText[^>]*src=\"([^\"]+)\"[^>]*\\/>/g);\n  if (snippetTextMatches) {\n    for (const match of snippetTextMatches) {\n      const srcMatch = match.match(/src=\"([^\"]+)\"/);\n      if (srcMatch) {\n        const snippetPath = srcMatch[1];\n        const snippetContent = readSnippetFile(snippetPath, currentFilePath);\n        if (snippetContent) {\n          // Keep the content as-is since it's already processed by readSnippetFile\n          html = html.replace(match, snippetContent);\n        } else {\n          html = html.replace(match, `<span class=\"snippet-text\">ðŸ“„ ${snippetPath}</span>`);\n        }\n      }\n    }\n  }\n  \n  // Handle any remaining MadCap snippet text without src\n  html = html.replace(/<MadCap:snippetText[^>]*\\/>/g, '<span class=\"snippet-text\">ðŸ“„ Snippet</span>')\n    // Handle MadCap conditional text - extract content and remove MadCap wrapper\n    .replace(/<MadCap:conditionalText[^>]*>([\\s\\S]*?)<\\/MadCap:conditionalText>/g, '$1')\n    // Remove other MadCap elements\n    .replace(/<MadCap:[^>]*>[\\s\\S]*?<\\/MadCap:[^>]*>/g, '')\n    .replace(/<MadCap:[^>]*\\/>/g, '');\n\n  // Remove MadCap-specific attributes and elements (after processing MadCap elements)\n  html = html.replace(/\\s*MadCap:[^=]*=\"[^\"]*\"/gi, '');\n  html = html.replace(/\\s*xmlns:[^=]*=\"[^\"]*\"/gi, '');\n  html = html.replace(/\\s*data-mc-[^=]*=\"[^\"]*\"/gi, '');\n  // Remove class attributes except for our custom classes\n  html = html.replace(/\\s*class=\"(?!internal-link|broken-link|snippet-placeholder|snippet-content|snippet-text|anchor|bold-text)[^\"]*\"/gi, '');\n  \n  // Fix malformed HTML tags and improve structure\n  html = html\n    // Fix broken link tags like <>text</></a> (after MadCap processing)\n    .replace(/<>([^<]+)<\\/><\\/a>/g, '<span class=\"broken-link\">$1</span>')\n    // Convert name anchors to proper id spans\n    .replace(/<a name=\"([^\"]+)\"[^>]*><\\/a>/g, '<span id=\"$1\" class=\"anchor\"></span>')\n    // Fix italic bold tags\n    .replace(/<b style=\"font-style: italic;\">([^<]+)<\\/b>/g, '<em>$1</em>')\n    // Convert i to em for better semantics\n    .replace(/<i>([^<]+)<\\/i>/g, '<em>$1</em>')\n    // Keep b tags as they are for now to test\n    // .replace(/<b>([\\s\\S]*?)<\\/b>/g, '<strong>$1</strong>')\n    // Convert u to proper underline styling\n    .replace(/<u>([\\s\\S]*?)<\\/u>/g, '<span style=\"text-decoration: underline;\">$1</span>')\n    // Fix broken closing tags\n    .replace(/<\\/a><b>/g, '</a> <strong>')\n    // Add proper spacing around headings\n    .replace(/<\\/h([1-6])>/g, '</h$1>\\n\\n')\n    // Add proper spacing around paragraphs\n    .replace(/<\\/p>/g, '</p>\\n\\n')\n    // Add proper spacing around list items\n    .replace(/<\\/li>/g, '</li>\\n')\n    // Add proper spacing around lists\n    .replace(/<\\/ul>/g, '</ul>\\n\\n')\n    .replace(/<\\/ol>/g, '</ol>\\n\\n')\n    // Add proper spacing around definition lists\n    .replace(/<\\/dl>/g, '</dl>\\n\\n')\n    .replace(/<\\/dt>/g, '</dt>\\n')\n    .replace(/<\\/dd>/g, '</dd>\\n')\n    // Fix self-closing img tags\n    .replace(/<\\/img>/g, '')\n    // Convert relative image paths to absolute paths\n    .replace(/<img([^>]*)\\ssrc=\"([^\"]+)\"/g, (match, attrs, src) => {\n      if (src.startsWith('http') || src.startsWith('/')) {\n        return match; // Already absolute or external\n      }\n      // Convert relative path to absolute path\n      const currentDir = path.dirname(currentFilePath);\n      const resolvedPath = path.join(currentDir, src);\n      const absolutePath = '/' + resolvedPath.replace(/\\\\/g, '/');\n      return `<img${attrs} src=\"${absolutePath}\"`;\n    })\n    // Add proper spacing around images (but not for inline images)\n    .replace(/<img([^>]*)>/g, '<img$1>')\n    // Add proper spacing around code blocks\n    .replace(/<\\/code>/g, '</code>')\n    .replace(/<code([^>]*)>/g, '<code$1>')\n    // Add proper spacing around pre blocks\n    .replace(/<\\/pre>/g, '</pre>\\n\\n')\n    .replace(/<pre([^>]*)>/g, '<pre$1>\\n')\n    // Enhance code block containers with syntax highlighting classes\n    .replace(/<div><pre><code>/g, '<div class=\"code-block syntax-highlighted\"><pre><code class=\"language-text\">')\n    .replace(/<\\/code><\\/pre><\\/div>/g, '</code></pre></div>')\n    \n    // Add syntax highlighting classes to inline code blocks\n    .replace(/<div class=\"code-block-inline\"><code>/g, '<div class=\"code-block-inline\"><code class=\"inline-code syntax-highlighted\">')\n    \n    // Auto-detect and add language classes to code blocks\n    .replace(/<code class=\"language-text\">([^<]*)<\\/code>/g, (match, code) => {\n      const trimmedCode = code.trim();\n      let language = 'text';\n      \n      // JavaScript/TypeScript detection\n      if (trimmedCode.includes('function') || trimmedCode.includes('const ') || trimmedCode.includes('let ') || trimmedCode.includes('var ')) {\n        language = 'javascript';\n      }\n      // JSON detection\n      else if (trimmedCode.startsWith('{') && trimmedCode.endsWith('}')) {\n        language = 'json';\n      }\n      // HTML detection\n      else if (trimmedCode.includes('<') && trimmedCode.includes('>')) {\n        language = 'html';\n      }\n      // CSS detection\n      else if (trimmedCode.includes('{') && trimmedCode.includes('}') && trimmedCode.includes(':')) {\n        language = 'css';\n      }\n      // Shell/Bash detection\n      else if (trimmedCode.startsWith('$') || trimmedCode.startsWith('#') || trimmedCode.includes('curl ') || trimmedCode.includes('npm ')) {\n        language = 'bash';\n      }\n      // SQL detection\n      else if (trimmedCode.toLowerCase().includes('select ') || trimmedCode.toLowerCase().includes('from ') || trimmedCode.toLowerCase().includes('where ')) {\n        language = 'sql';\n      }\n      // Python detection\n      else if (trimmedCode.includes('def ') || trimmedCode.includes('import ') || trimmedCode.includes('print(')) {\n        language = 'python';\n      }\n      \n      return `<code class=\"language-${language}\">${code}</code>`;\n    })\n    \n    // Add syntax highlighting classes to regular inline code tags (but not those already in code blocks)\n    .replace(/<code>([^<]*)<\\/code>/g, '<code class=\"inline-code syntax-highlighted\">$1</code>')\n    \n    // Fix code blocks that are not properly wrapped\n    .replace(/<pre><code class=\"language-text\">([^<]*)<\\/code><\\/pre>/g, '<div class=\"code-block syntax-highlighted\"><pre><code class=\"language-text\">$1</code></pre></div>')\n    \n    // Fix code blocks that are missing the wrapper div\n    .replace(/<pre><code>([^<]*)<\\/code><\\/pre>/g, '<div class=\"code-block syntax-highlighted\"><pre><code class=\"language-text\">$1</code></pre></div>')\n    \n    // Fix code blocks that have inline-code class but should be code blocks - handle multiline content\n    .replace(/<div><pre>\\s*<code class=\"inline-code syntax-highlighted\">([\\s\\S]*?)<\\/code>\\s*<\\/pre>\\s*<\\/div>/g, '<div class=\"code-block syntax-highlighted\"><pre><code class=\"language-text\">$1</code></pre></div>')\n    \n    // Fix code blocks that are missing the proper wrapper - handle multiline content\n    .replace(/<div><pre>\\s*<code class=\"inline-code syntax-highlighted\">([\\s\\S]*?)<\\/code>\\s*<\\/pre>\\s*<\\/div>/g, '<div class=\"code-block syntax-highlighted\"><pre><code class=\"language-text\">$1</code></pre></div>')\n    // Enhance code blocks within list items - remove br tags and clean up spacing\n    .replace(/<li><strong>([^<]*)<\\/strong><br \\/>\\s*<div><code>/g, '<li><strong>$1</strong><div class=\"code-block-inline\"><code>')\n    .replace(/<\\/code>\\s*<\\/div>\\s*<\\/li>/g, '</code></div></li>')\n    // Remove any remaining br tags before code blocks in list items\n    .replace(/<li><strong>([^<]*)<\\/strong>\\s*<br \\/>\\s*<div><code>/g, '<li><strong>$1</strong><div class=\"code-block-inline\"><code>')\n    // Handle direct code tags after br (without div wrapper)\n    .replace(/<li><strong>([^<]*)<\\/strong>\\s*<br \\/>\\s*<code>/g, '<li><strong>$1</strong><div class=\"code-block-inline\"><code>')\n    .replace(/<\\/code>\\s*<\\/li>/g, '</code></div></li>')\n    // Add proper spacing around blockquotes\n    .replace(/<\\/blockquote>/g, '</blockquote>\\n\\n')\n    .replace(/<blockquote([^>]*)>/g, '<blockquote$1>\\n')\n    // Handle line breaks and horizontal rules\n    .replace(/<br\\s*\\/?>/g, '<br />')\n    .replace(/<hr\\s*\\/?>/g, '<hr />')\n    // Add proper spacing around horizontal rules\n    .replace(/<hr\\s*\\/?>/g, '\\n<hr />\\n\\n')\n    // Handle iframe elements - convert to responsive video containers\n    .replace(/<iframe([^>]*)\\s*\\/?>/g, '<div class=\"video-container\"><iframe$1></iframe></div>')\n    // Clean up any duplicate iframe tags that might have been created\n    .replace(/<\\/iframe><\\/iframe>/g, '</iframe>')\n    // Clean up any orphaned iframe closing tags\n    .replace(/<\\/iframe>/g, '')\n    // Handle table elements with proper spacing\n    .replace(/<\\/table>/g, '</table>\\n\\n')\n    .replace(/<\\/thead>/g, '</thead>\\n')\n    .replace(/<\\/tbody>/g, '</tbody>\\n')\n    .replace(/<\\/tfoot>/g, '</tfoot>\\n')\n    .replace(/<\\/tr>/g, '</tr>\\n')\n    .replace(/<\\/th>/g, '</th>')\n    .replace(/<\\/td>/g, '</td>')\n    // Handle form elements\n    .replace(/<\\/form>/g, '</form>\\n\\n')\n    .replace(/<\\/fieldset>/g, '</fieldset>\\n\\n')\n    .replace(/<\\/legend>/g, '</legend>\\n')\n    .replace(/<\\/label>/g, '</label>')\n    .replace(/<\\/input>/g, '')\n    .replace(/<\\/textarea>/g, '</textarea>\\n')\n    .replace(/<\\/select>/g, '</select>\\n')\n    .replace(/<\\/option>/g, '</option>')\n    .replace(/<\\/button>/g, '</button>\\n')\n    // Handle semantic elements\n    .replace(/<\\/article>/g, '</article>\\n\\n')\n    .replace(/<\\/section>/g, '</section>\\n\\n')\n    .replace(/<\\/aside>/g, '</aside>\\n\\n')\n    .replace(/<\\/nav>/g, '</nav>\\n\\n')\n    .replace(/<\\/header>/g, '</header>\\n\\n')\n    .replace(/<\\/footer>/g, '</footer>\\n\\n')\n    .replace(/<\\/main>/g, '</main>\\n\\n')\n    // Handle details and summary\n    .replace(/<\\/details>/g, '</details>\\n\\n')\n    .replace(/<\\/summary>/g, '</summary>\\n')\n    // Handle figure and figcaption\n    .replace(/<\\/figure>/g, '</figure>\\n\\n')\n    .replace(/<\\/figcaption>/g, '</figcaption>\\n')\n    // Handle address\n    .replace(/<\\/address>/g, '</address>\\n\\n')\n    // Handle cite\n    .replace(/<\\/cite>/g, '</cite>')\n    // Handle time\n    .replace(/<\\/time>/g, '</time>')\n    // Handle mark\n    .replace(/<\\/mark>/g, '</mark>')\n    // Handle small\n    .replace(/<\\/small>/g, '</small>')\n    // Handle sub and sup\n    .replace(/<\\/sub>/g, '</sub>')\n    .replace(/<\\/sup>/g, '</sup>')\n    // Handle kbd\n    .replace(/<\\/kbd>/g, '</kbd>')\n    // Handle samp\n    .replace(/<\\/samp>/g, '</samp>')\n    // Handle var\n    .replace(/<\\/var>/g, '</var>')\n    // Handle abbr\n    .replace(/<\\/abbr>/g, '</abbr>')\n    // Handle data\n    .replace(/<\\/data>/g, '</data>')\n    // Handle output\n    .replace(/<\\/output>/g, '</output>')\n    // Handle progress\n    .replace(/<\\/progress>/g, '</progress>\\n')\n    // Handle meter\n    .replace(/<\\/meter>/g, '</meter>\\n');\n  \n  // Clean up empty paragraphs, divs, and malformed tags\n  html = html.replace(/<p[^>]*>\\s*<\\/p>/gi, '');\n  html = html.replace(/<div[^>]*>\\s*<\\/div>/gi, '');\n  html = html.replace(/<\\s*\\/\\s*>/g, ''); // Remove empty self-closing tags like < />\n  \n  // Normalize whitespace but preserve line breaks\n  html = html.replace(/[ \\t]+/g, ' ').replace(/\\n\\s*\\n/g, '\\n\\n').trim();\n  \n  // Fix any remaining issues with inline content\n  // Remove newlines that are in the middle of inline content (but preserve structure)\n  html = html.replace(/([a-zA-Z0-9.,;:!?])\\s*\\n\\s*([a-zA-Z0-9])/g, '$1 $2');\n  // Fix newlines in the middle of inline tags (but preserve block element spacing)\n  html = html.replace(/(<\\/?(?:strong|em|b|i|span|a|img)[^>]*>)\\s*\\n\\s*(<\\/?(?:strong|em|b|i|span|a|img)[^>]*>)/g, '$1$2');\n  // Fix newlines that break up sentences in the middle of words\n  html = html.replace(/([a-zA-Z])\\s*\\n\\s*([a-zA-Z])/g, '$1$2');\n  // Fix newlines that break up sentences after punctuation\n  html = html.replace(/([.,;:!?])\\s*\\n\\s*([a-zA-Z])/g, '$1 $2');\n  // Remove newlines that are in the middle of sentences (after words, before words)\n  html = html.replace(/([a-zA-Z])\\s*\\n\\s*([a-zA-Z])/g, '$1 $2');\n  \n  // Fix spacing around inline elements within paragraphs\n  // Remove newlines between inline elements and text\n  html = html.replace(/([a-zA-Z0-9.,;:!?])\\s*\\n\\s*(<img[^>]*>)/g, '$1 $2');\n  html = html.replace(/(<img[^>]*>)\\s*\\n\\s*([a-zA-Z0-9.,;:!?])/g, '$1 $2');\n  html = html.replace(/([a-zA-Z0-9.,;:!?])\\s*\\n\\s*(<strong[^>]*>)/g, '$1 $2');\n  html = html.replace(/(<\\/strong>)\\s*\\n\\s*([a-zA-Z0-9.,;:!?])/g, '$1 $2');\n  html = html.replace(/([a-zA-Z0-9.,;:!?])\\s*\\n\\s*(<b[^>]*>)/g, '$1 $2');\n  html = html.replace(/(<\\/b>)\\s*\\n\\s*([a-zA-Z0-9.,;:!?])/g, '$1 $2');\n  html = html.replace(/([a-zA-Z0-9.,;:!?])\\s*\\n\\s*(<em[^>]*>)/g, '$1 $2');\n  html = html.replace(/(<\\/em>)\\s*\\n\\s*([a-zA-Z0-9.,;:!?])/g, '$1 $2');\n  html = html.replace(/([a-zA-Z0-9.,;:!?])\\s*\\n\\s*(<a[^>]*>)/g, '$1 $2');\n  html = html.replace(/(<\\/a>)\\s*\\n\\s*([a-zA-Z0-9.,;:!?])/g, '$1 $2');\n  \n  // Fix spacing around parentheses and inline content\n  html = html.replace(/(\\()\\s*\\n\\s*([^)]*)\\s*\\n\\s*(\\))/g, '$1$2$3');\n  html = html.replace(/([a-zA-Z0-9])\\s*\\n\\s*(\\()/g, '$1 $2');\n  html = html.replace(/(\\))\\s*\\n\\s*([a-zA-Z0-9])/g, '$1 $2');\n  \n  // More aggressive inline content fixing for the specific pattern\n  // Fix: text <b>text</b> (<img>) text <b>text</b> (<img>) text\n  html = html.replace(/([a-zA-Z0-9.,;:!?])\\s*\\n\\s*(<b[^>]*>[^<]*<\\/b>)\\s*\\n\\s*(\\()\\s*\\n\\s*(<img[^>]*>)\\s*\\n\\s*(\\))\\s*\\n\\s*([a-zA-Z0-9.,;:!?])\\s*\\n\\s*(<b[^>]*>[^<]*<\\/b>)\\s*\\n\\s*(\\()\\s*\\n\\s*(<img[^>]*>)\\s*\\n\\s*(\\))\\s*\\n\\s*([a-zA-Z0-9.,;:!?])/g, '$1 $2 $3$4$5 $6 $7 $8$9$10 $11');\n  \n  return html;\n}\n\n/**\n * Removes HTML tags from text content\n * @param html - HTML string\n * @returns Plain text\n */\nfunction cleanHTML(html: string): string {\n  return html.replace(/<[^>]*>/g, '').trim();\n}\n\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 359, "column": 0}, "map": {"version":3,"sources":["file:///Users/moe.sarraf/Documents/GitHub/cwi-docs-nextjs/src/app/api/content/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { readHTMLFile } from '@/utils/htmlReader';\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const href = searchParams.get('href');\n\n    if (!href) {\n      return NextResponse.json(\n        { error: 'Missing href parameter' },\n        { status: 400 }\n      );\n    }\n\n    const content = await readHTMLFile(href);\n\n    if (!content) {\n      return NextResponse.json(\n        { error: 'Content not found' },\n        { status: 404 }\n      );\n    }\n\n    return NextResponse.json(content);\n  } catch (error) {\n    console.error('Error in content API:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEO,eAAe,IAAI,OAAoB;IAC5C,IAAI;QACF,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;QAC5C,MAAM,OAAO,aAAa,GAAG,CAAC;QAE9B,IAAI,CAAC,MAAM;YACT,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAyB,GAClC;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,UAAU,MAAM,IAAA,6IAAY,EAAC;QAEnC,IAAI,CAAC,SAAS;YACZ,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAoB,GAC7B;gBAAE,QAAQ;YAAI;QAElB;QAEA,OAAO,gJAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yBAAyB;QACvC,OAAO,gJAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAwB,GACjC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}